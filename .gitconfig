[user]
	name = Valentin Agachi
	email = github-com@agachi.name

[core]
	autocrlf = false
	excludesfile = ~/.gitignore-global
	filemode = true
	whitespace = trailing-space,space-before-tab,tabwidth=2
	pager = "delta --dark --hunk-style plain --tabs 2"

[help]
	autoCorrect = -1

[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = auto

[color "branch"]
	current = white cyan bold
	local = cyan
	remote = yellow

[color "diff"]
	commit = yellow bold
	frag = magenta bold
	old = red bold
	plain = normal
	meta = yellow
	new = green bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
	header = normal
	added = green
	updated = yellow
	changed = magenta
	untracked = cyan

[branch]
	autosetuprebase = always

[merge]
	conflictstyle = diff3
	ff = only
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[fetch]
	recurseSubmodules = on-demand

[pull]
	ff = only
	rebase = true

[push]
	default = simple
	followTags = true

[log]
	date = iso

[status]
	showUntrackedFiles = all
	submodulesummary = true

[diff]
	# Detect copies as well as renames.
	renames = copies
	submodule = log
  tool = icdiff

# https://blog.scottnonnenberg.com/better-git-configuration/
# git difftool master branch
[difftool]
  prompt = false

[difftool "icdiff"]
  cmd = icdiff --line-numbers $LOCAL $REMOTE

[pager]
	difftool = true

[grep]
	lineNumber = true

# https://github.com/dandavison/delta/issues/40
# [interactive]
#   diffFilter = "delta --dark --file-style plain --hunk-style plain --tabs 2"

[alias]
	a = add
	ad = add
	ap = add -p
	amend = commit --amend --no-edit
	amends = commit --amend --no-verify
	ams = commit --amend --no-verify
	co = checkout
	both = diff HEAD
	b = branch
	br = branch
	brc = !"git fetch -p; for branch in $(git branch -vv --no-color | grep ': gone]' | awk '{print $1}'); do git branch -D $branch; done"
	brm = !"git branch --merged | grep -v \"\\*\" | grep -v \"^[^/]\\+$\" | xargs -n 1 git branch -d"
	cl = clone --recursive
	cm = commit -m
	cma = commit -a -m
	cmm = commit
	cmma = commit -a
	cms = commit --no-verify -m
	cmsa = commit --no-verify -a -m
	d = diff
	dev = switch develop
	dr = !"git dev && git pl"
	df = diff
	dl = diff HEAD^
	fhist = log --follow -p --
	filehistory = log --follow -p --
	files = show --pretty="" --name-only
	fix = !"git commit --fixup $(git rev-list --reverse develop..HEAD | head -1)"
	fixc = commit --fixup
	fixh = commit --fixup HEAD
	fixm = !"git commit --fixup $(git rev-list --reverse main..HEAD | head -1)"
	fixms = !"git commit --fixup $(git rev-list --reverse master..HEAD | head -1)"
	fix1 = commit --fixup HEAD~1
	fix2 = commit --fixup HEAD~2
	fix3 = commit --fixup HEAD~3
	flog = log --follow -p --
	grp = grep --heading --line-number
	l = !"git --no-pager log -n 10 --graph --pretty=format:'%C(cyan)%h%C(yellow)%d%Creset %s %Cgreen(%cr)%C(blue)<%an>%Creset' --abbrev-commit --date=relative"
	lg = log --graph --pretty=format:'%C(cyan)%h%C(yellow)%d%Creset %s (%Cgreen%cr %Cred%ar%Creset)%C(blue)<%an>%Creset' --abbrev-commit --date=relative
	lgm = !"git --no-pager log -n 30 --graph --pretty=format:'%C(cyan)%h%C(yellow)%d%Creset %s (%Cgreen%cr %Cred%ar%Creset)' --abbrev-commit --date=relative"
	ls = !"git l"
	last = log -n 1
	m = switch main
	main = switch main
	mrg = merge --ff-only
	ms = switch master
	nb = switch --create
	pick = cherry-pick
	pl = pull --ff-only --rebase origin
	plg = !"git pl && git l"
	pls = !"git pull --ff-only --rebase origin; git submodule sync --recursive; git su;"
	po = !"git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)"
	prune = fetch --prune
	ps = push origin HEAD
	psf = push -f origin HEAD
	prod = switch production
	rb = for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ --count=10
	recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format=\"%(refname:short)\"
	reset = checkout --
	reup = !"git fetch upstream main && git mrg upstream/main"
	reupms = !"git fetch upstream master && git mrg upstream/master"
	rs = checkout --
	rbc = rebase --continue
	rbi = rebase --interactive
	rbim = rebase --interactive --autosquash main
	rbimm = !"git main && git pl && git switch - && git rbim"
	rbims = rebase --interactive --autosquash master
	rbid = rebase --interactive --autosquash develop
	rbidd = !"git dr && git switch - && git rbid"
	rbms = rebase master
	rbdv = rebase develop
	s = status -s
	sa = stash apply
	sd = stash drop
	showw = difftool HEAD~1 HEAD
	sl = stash list
	ss = stash save
	st = status
	su = submodule update --init --recursive
	sta = diff --cached
	staged = diff --cached
	sw = switch
	undo = reset --soft HEAD^
	undoit = !"git undo && git unstage . && git rs ."
	unsta = reset HEAD
	unstage = reset HEAD

[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
