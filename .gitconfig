[user]
	name = Valentin Agachi
	email = github-com@agachi.name

[core]
	autocrlf = false
	filemode = true
	whitespace = trailing-space,space-before-tab
	pager = less -R -S -X -x4 # 4-spaces tabs

[help]
	autoCorrect = -1

[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = auto

[color "branch"]
	current = white cyan bold
	local = cyan
	remote = yellow

[color "diff"]
	commit = yellow bold
	plain = normal
	meta = yellow
	frag = magenta
	old = red bold
	new = green bold
	whitespace = black red

[color "status"]
	header = normal
	added = green
	updated = yellow
	changed = magenta
	untracked = cyan

[branch]
	autosetuprebase = always

[merge]
	conflictstyle = diff3
	ff = only
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[fetch]
	recurseSubmodules = on-demand

[pull]
	rebase = true

[push]
	default = simple
	followTags = true

[log]
	date = iso

[status]
	showUntrackedFiles = all
	submodulesummary = true

[diff]
	# Detect copies as well as renames.
	renames = copies
	submodule = log
  tool = icdiff

# https://blog.scottnonnenberg.com/better-git-configuration/
# git difftool master branch
[difftool]
  prompt = false

[difftool "icdiff"]
  cmd = ~/.local/bin/icdiff --line-numbers $LOCAL $REMOTE

[pager]
	difftool = true

[grep]
	lineNumber = true

[alias]
	a = add
	ad = add
	ap = add -p
	amend = commit --amend --no-edit
	amends = commit --amend --no-verify
	ams = commit --amend --no-verify
	co = checkout
	checout = checkout
	both = diff HEAD
	brm = !"git branch --merged | grep -v \"\\*\" | grep -v \"^[^/]\\+$\" | xargs -n 1 git branch -d"
	br = branch
	cl = clone --recursive
	cm = commit -m
	cma = commit -a -m
	cmm = commit
	cmma = commit -a
	cms = commit --no-verify -m
	cmsa = commit --no-verify -a -m
	cp = cherry-pick
	d = diff --color-words
	df = diff
	dl = diff HEAD^
	fhist = log --follow -p --
	filehistory = log --follow -p --
	fix = commit --fixup
	flog = log --follow -p --
	grp = grep --heading --line-number
	l = !"git --no-pager log -n 10 --graph --pretty=format:'%C(cyan)%h%C(yellow)%d%Creset %s %Cgreen(%cr)%C(blue)<%an>%Creset' --abbrev-commit --date=relative"
	lg = log --graph --pretty=format:'%C(cyan)%h%C(yellow)%d%Creset %s (%Cgreen%cr %Cred%ar%Creset)%C(blue)<%an>%Creset' --abbrev-commit --date=relative
	lgm = !"git --no-pager log -n 30 --graph --pretty=format:'%C(cyan)%h%C(yellow)%d%Creset %s (%Cgreen%cr %Cred%ar%Creset)' --abbrev-commit --date=relative"
	ls = !"git l"
	last = log -n 1
	mrg = merge --ff-only
	ms = checkout master
	nb = checkout -b
	pl = pull --ff-only --rebase origin
	pls = !"git pull --ff-only --rebase origin; git submodule sync --recursive; git su;"
	prune = fetch --prune
	ps = push origin HEAD
	psf = push -f origin HEAD
	prod = checkout production
	recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format=\"%(refname:short)\"
	reset = checkout --
	rs = checkout --
	rbc = rebase --continue
	rbi = rebase --interactive --autosquash master
	rbms = rebase master
	s = status -s
	sa = stash apply
	sd = stash drop
	sl = stash list
	ss = stash save
	st = status
	su = submodule update --init --recursive
	sta = diff --cached --color-words
	staged = diff --cached
	undo = reset --soft HEAD^
	unsta = reset HEAD
	unstage = reset HEAD
